
#Область Заголовок
// Модуль расчета стоимости и отражения движений ценных бумаг.
#КонецОбласти

#Область ПрограммныйИнтерфейс
//Раздел содержит экспортные процедуры и функции, предназначенные
//для использования другими объектами конфигурации или другими программами (например, через
//внешнее соединение).

// <Формирование движений по регистру БалансоваяСтоимостьБумаг>
//
// Параметры:
//  <Источник>  - <ДокументОбъект> - <документ который проводится по регистру Балансовая стоимость бумаг>
//  <Отказ>  - <Булево> - <признак отказа от формирования движений в случае ошибок>
//
Процедура ДвиженияПоЦеннымБумагам(Источник, Отказ) Экспорт
    
    Движения = Источник.Движения;
    // Затраты на приобритение
    Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПокупкаЦенныхБумаг") Тогда
        // регистр БалансоваяСтоимостьБумаг Приход
        Движения.БалансоваяСтоимостьБумаг.Записывать = Истина;
        Движение = Движения.БалансоваяСтоимостьБумаг.Добавить();
        Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
        Движение.Период = Источник.Дата;
        Движение.ТорговаяПлощадка = Источник.ТорговаяПлощадка;
        Движение.Брокер = Источник.Брокер;
        Движение.Бумага = Источник.Бумага;
        Движение.ДокументПриобритения = Источник.Ссылка;
        Движение.Количество = Источник.Количество;
        Движение.Сумма = Источник.Сумма;
    КонецЕсли; 
    
    Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПродажаЦенныхБумаг") Тогда
        Движения.БалансоваяСтоимостьБумаг.Очистить();
        Движения.БалансоваяСтоимостьБумаг.Записать();
        Движения.БалансоваяСтоимостьБумаг.Записывать = Истина;
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   БалансоваяСтоимостьБумагОстатки.ДокументПриобритения КАК ДокументПриобритения,
        |   БалансоваяСтоимостьБумагОстатки.КоличествоОстаток КАК КоличествоОстаток,
        |   БалансоваяСтоимостьБумагОстатки.СуммаОстаток КАК СуммаОстаток
        |ПОМЕСТИТЬ ВТ_Остатки
        |ИЗ
        |   РегистрНакопления.БалансоваяСтоимостьБумаг.Остатки(
        |           &ДатаОстатка,
        |           ТорговаяПлощадка = &ТорговаяПлощадка
        |               И Брокер = &Брокер
        |               И Бумага = &Бумага) КАК БалансоваяСтоимостьБумагОстатки
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ПродажаЦенныхБумаг.Ссылка КАК Документ,
        |   БалансоваяСтоимостьБумагОстатки.ДокументПриобритения КАК ДокументПриобритения,
        |   ПродажаЦенныхБумаг.Количество КАК КоличествоДокумент,
        |   ЕСТЬNULL(БалансоваяСтоимостьБумагОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
        |   ЕСТЬNULL(БалансоваяСтоимостьБумагОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
        |   БалансоваяСтоимостьБумагОстатки.ДокументПриобритения.Дата КАК ДокументПриобритенияДата,
        |   БалансоваяСтоимостьБумагОстатки.ДокументПриобритения.Номер КАК ДокументПриобритенияНомер
        |ИЗ
        |   Документ.ПродажаЦенныхБумаг КАК ПродажаЦенныхБумаг
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БалансоваяСтоимостьБумаг.Остатки КАК БалансоваяСтоимостьБумагОстатки
        |       ПО (БалансоваяСтоимостьБумагОстатки.КоличествоОстаток > 0)
        |ГДЕ
        |   ПродажаЦенныхБумаг.Ссылка = &Ссылка
        |
        |УПОРЯДОЧИТЬ ПО
        |   ДокументПриобритенияДата,
        |   ДокументПриобритенияНомер
        |ИТОГИ
        |   МАКСИМУМ(КоличествоДокумент),
        |   СУММА(КоличествоОстаток)
        |ПО
        |   Документ";
        
        Запрос.УстановитьПараметр("ТорговаяПлощадка", Источник.ТорговаяПлощадка);
        Запрос.УстановитьПараметр("Брокер", Источник.Брокер);
        Запрос.УстановитьПараметр("Бумага", Источник.Бумага);
        Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(Источник.МоментВремени(), ВидГраницы.Исключая));
        Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДокумент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
        Пока ВыборкаДокумент.Следующий() Цикл
            КоличествоДокумент = ВыборкаДокумент.КоличествоДокумент;
            Выборка = ВыборкаДокумент.Выбрать();
            Пока Выборка.Следующий() Цикл
                Количество = Мин(КоличествоДокумент, Выборка.КоличествоОстаток);
                Если Количество <= 0 Тогда
                    Прервать;
                КонецЕсли;
                Сумма = ?(Количество = Выборка.КоличествоОстаток, Выборка.СуммаОстаток, Выборка.СуммаОстаток*Количество/Выборка.КоличествоОстаток); 
                Движение = Движения.БалансоваяСтоимостьБумаг.ДобавитьРасход();
                ЗаполнитьЗначенияСвойств(Движение, Источник);
                Движение.Период                 = Источник.Дата;
                Движение.ДокументПриобритения   = Выборка.ДокументПриобритения;
                Движение.Количество             = Количество;
                Движение.Сумма                  = Сумма;
                КоличествоДокумент              = КоличествоДокумент - Количество;
            КонецЦикла;
            Если КоличествоДокумент > 0 Тогда
                // Отказ = Истина;
                Движение = Движения.БалансоваяСтоимостьБумаг.ДобавитьРасход();
                ЗаполнитьЗначенияСвойств(Движение, Источник);
                Движение.Период                 = Источник.Дата;
                Движение.Количество             = КоличествоДокумент;
                Движение.Сумма                  = 0;
            КонецЕсли; 
        КонецЦикла;
    КонецЕсли; 
    
КонецПроцедуры // ДвиженияПоЦеннымБумагам()
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Раздел предназначен для модулей, которые являются
//частью некоторой функциональной подсистемы. В нем должны быть размещены экспортные процедуры
//и функции, которые допустимо вызывать только из других функциональных подсистем этой же
//библиотеки.
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Раздел содержит процедуры и функции, составляющие
//внутреннюю реализацию общего модуля. В тех случаях, когда общий модуль является частью
//некоторой функциональной подсистемы, включающей в себя несколько объектов метаданных, в этом
//разделе также могут быть размещены служебные экспортные процедуры и функции,
//предназначенные только для вызова из других объектов данной подсистемы. 
//
//Для объемных общих модулей рекомендуется разбивать этот раздел на подразделы, по
//функциональному признаку.
#КонецОбласти
 